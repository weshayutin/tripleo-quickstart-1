# Create the volume pool directory if it doesn't already exist.  This
# will be the target of the libvirt volume pool we create in the next
# task.
- name: Ensure volume pool directory exists
  file:
    path: "{{ libvirt_volume_path }}"
    state: directory

# Create a libvirt volume pool.  This is where we'll be creating
# images for the undercloud and overcloud.
- name: Define volume pool
  virt_pool:
    command: define
    state: present
    name: "{{ libvirt_volume_pool }}"
    xml: '{{ lookup("template", "volume_pool.xml.j2") }}'
    uri: "{{ libvirt_uri }}"

- name: Start volume pool
  virt_pool:
    command: start
    state: active
    name: "{{ libvirt_volume_pool }}"
    uri: "{{ libvirt_uri }}"

- name: Mark volume pool for autostart
  virt_pool:
    name: "{{ libvirt_volume_pool }}"
    autostart: "yes"
    uri: "{{ libvirt_uri }}"

- when: overcloud_nodes
  block:

    # Generate MAC addresses that we'll use for the overcloud nodes.
    # By generating these in advance we can populate the
    # `instackenv.json` file with MAC addresses without running
    # introspection.
    - name: get a list of MACs to use
      generate_macs:
        nodes: "{{ overcloud_nodes }}"
        networks: "{{ networks }}"
      register: node_mac_map

    # Create libvirt volumes for the overcloud hosts.
    - name: Check if overcloud volumes exist
      command: >
        virsh vol-info --pool '{{libvirt_volume_pool}}' '{{item.name}}.qcow2'
      register: overcloud_vol_check
      ignore_errors: true
      environment:
        LIBVIRT_DEFAULT_URI: "{{ libvirt_uri }}"
      with_items: "{{ overcloud_nodes }}"

    - name: Create overcloud vm storage
      command: >
        virsh vol-create-as '{{ libvirt_volume_pool }}'
        '{{ item.item.name }}'.qcow2 '{{ flavors[item.item.flavor].disk }}'G
        --format qcow2
      environment:
        LIBVIRT_DEFAULT_URI: "{{ libvirt_uri }}"
      when: item|failed
      with_items: "{{ overcloud_vol_check.results }}"

    # Define (but do not start) the overcloud nodes.  These will be
    # booted later by ironic during the provisioning process.
    - name: Define overcloud vms
      virt:
        name: "{{ item.name }}"
        command: define
        xml: "{{ lookup('template', 'baremetalvm.xml.j2') }}"
        uri: "{{ libvirt_uri }}"
      with_items: "{{ overcloud_nodes }}"

# Generate the `instackenv.json` configuration file.  Note that this
# task *must* occur after the above overcloud tasks, because if
# `overcloud_nodes` is defined the template depends on the
# `node_mac_map` variable.
- name: Write instackenv script
  template:
    src: "{{ undercloud_instackenv_template }}"
    dest: "{{ working_dir }}/instackenv.json"

